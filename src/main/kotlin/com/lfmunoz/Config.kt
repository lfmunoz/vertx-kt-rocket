package com.lfmunoz

import org.slf4j.Logger
import org.slf4j.LoggerFactory


////////////////////////////////////////////////////////////////////////////////
// Metrics
////////////////////////////////////////////////////////////////////////////////
val SERVER_PING_SUMMARY = "rocket_server_pingSummary"
val SERVER_PONG_SUMMARY = "rocket_server_pongSummary"
val SERVER_CONNECTION_COUNT = "rocket_server_connectionCount"
val SERVER_DISCONNECTION_COUNT = "rocket_server_disconnectionCount"
val SERVER_EXCEPTION_COUNT = "rocket_server_exceptionCount"

val CLIENT_PING_SUMMARY = "rocket_client_pingSummary"
val CLIENT_PONG_SUMMARY = "rocket_client_pongSummary"
val CLIENT_DEPLOY_SUMMARY = "rocket_client_deploySummary"

////////////////////////////////////////////////////////////////////////////////
// Eventbus addresses
////////////////////////////////////////////////////////////////////////////////
val SERVER_ID_SERVICE = "SERVER_ID_SERVICE"

////////////////////////////////////////////////////////////////////////////////
// Data Objects
////////////////////////////////////////////////////////////////////////////////
data class Config(
        val port: Int,
        val remoteHost: String,
        val localHost: String,
        val sendDelay: Long
)

////////////////////////////////////////////////////////////////////////////////
// Utils
////////////////////////////////////////////////////////////////////////////////
fun infiniteIterator(items: List<String>) = object : Iterator<String> {
    var idx = 0
    override fun hasNext(): Boolean {
        return true
    }

    override fun next(): String {
        return items[idx++ % items.size]
    }
}


////////////////////////////////////////////////////////////////////////////////
// Loggin
////////////////////////////////////////////////////////////////////////////////


fun <R : Any> R.logger(): Lazy<Logger> {
    return lazy { LoggerFactory.getLogger(this.javaClass.name) }
}

